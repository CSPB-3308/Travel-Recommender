Unit-test for verifying that constructor raises an error if a non-string value is passed:  
Format: test constructor by entering in a number, should raise exception as predicted (i.e. "Processors require strings") 
* def test_init_not_string(self):
    self.assertRaises(Exception, textproc.Processor, 1234)
    * Also test that exception is raised when no parameter is passed in, check in same methodology via assertRaises, should throw same exception 


Unit-tests for count() function: 
Format: 
* def test_count(self):
    text = XXX
    p = textproc.Processor(text)
    count = p.count()
    self.assertEqual(count, ‘expected count of chars in p’ , "length of 'text' does not match input”)
    
    For each of these options assign text to be these strings
        * test empty string: should return 0 because there is no values within the input 
        * test string of all whitespace:  whitespace is included in the definition of characters in python and should return the respective count of whitespace chars
        * test string of numbers: should return correct number of numbers input, as long as numbers are in string format 
        * test string of letters: should return correct number of letters making up the string
        * test string of punctuation: should return correct count of punctuation because punctuations is included in the definition of characters in python
        * test string of special characters: should return 0, special characters should be ignored, as they are not considered valid characters for a string  
        * test string with combination of spaces, letters and numbers: should return correct count of all spaces, letters, and numbers summed together 
        * test string with combination of spaces, letters and numbers with newline special char at end: should return correct count of all spaces, letters, and numbers summed together, while ignoring the newline char at end (verify letter 'n' included in the newline is not counted as a valid letter) 
    Note:  any non-strings would be stopped by an exception prior to being pushed to the count() function, no need to test this 


Unit-tests for count_alpha() function: 
Format: 
* def test_count_alpha(self):
     text = XXX
     p = textproc.Processor(text)
     count = p.count_alpha()
     self.assertEqual(count, ‘expected count of letters in p’ , “count of letters in text' does not match input”)
    
    For each of these options assign text to be these types of strings:
        * test empty string: should return 0 because there is no values within the input 
        * test string of all whitespace: should return 0 because whitespace is not a letter
        * test string of numbers: should return 0 because numbers are not included in the definition of letters
        * test string of letters: should return correct number letters reflected in string 
        * test string of punctuation: should return 0, punctuation should not be counted as a letter
        * test string of special characters: should return 0 
        * test string with combination of spaces, letters and numbers: should return value reflective of count of letters in string, no-more, no-less
        * test string with combination of spaces, letters and numbers with newline special char at end: should return value reflective of count of letters in string, no-more, no-less, verify special characters are ignored in count correctly
        * test string with numbers and letters alternating one another: output should return count of ONLY letters not the numbers in the string
        * string with combination of capital and lower-case letters: verify that function is not case sensitive and counts all letters correctly, should return count  of all letters in string regardless of case  
    Note:  any non-strings would be stopped by an exception prior to being pushed to the count() function, no need to test this 
   

def test_count_numeric(self):
        #This is testing upper and lower case and also a spelled out word seven
        text = "tesing123 seVen 0"
        t = textproc.Processor.count_numeric(text)
        self.assertEqual(t, 4, "'text' not returning correct amount of numbers 0-9")

        # This is testing the case where the string is just nothing
        nothing = ""
        n = textproc.Processor.count_numeric(nothing)
        self.assertEqual(n, 0, "'nothing' not returning correct amount of number 0-9")
        
        #This is testing where the beginning of the string is blank
        begin_blank = "                12345"
        bb = textproc.Processor.count_numeric(begin_blank)
        self.assertEqual(bb, 5, "'begin_blank' not returning correct amount of number 0-9")
        
        #This is testing where the end of the string is blank
        end_blank = "12345678          "
        eb = textproc.Processor.count_numeric(end_blank)
        self.assertEqual(eb, 8, "'end_blank' not returning correct amount of number 0-9")
        
        #This is testing a lot of special characters
        characters = R'"000000000!@#$%^&*()_-+={}[]"/x:;?/>OOOOO<,.~`abcdefghijklmnopqrstuvwxyz123456789"'#This is testing a lot of special characters
        c = textproc.Processor.count_numeric(characters)
        self.assertEqual(c, 18, "'characters' not returning correct amount of number 0-9")
        
        #This is testing singe quote character
        single_quotes = R"abcdef'hij1234'''"#This is testing singe quote character
        sq = textproc.Processor.count_numeric(single_quotes)
        self.assertEqual(sq, 4, "'single_quotes' not returning correct amount of number 0-9")


def count_vowels tests:
1. Test that an empty string returns 0. The test will pass an empty string into the count_vowels 
   method and assert that the answer given back is equal to 0. 

2. Test that a string with a single vowel character returns 1. The test will pass a 1 length 
   string that contains a vowel into the count_vowels method and assert that the answer given
   is equal to 1.

3. Test that a nonempty string with no vowels returns 0. The test will pass a string with
   consonants, symbols, numbers, etc. with no vowels and assert that the answer given back
   is equal to 0. 

4. Test that a string with multiple vowels scattered throughout with consonants and other symbols returns the correct 
   number of vowels in the string. The test will pass a string with constonants, symbols, numbers, 
   and multiple vowels scattered throughout the string and assert that the answer give back is equal to the number
   of vowels contained in the string.

5. Test that the function is case insensitive. The test will pass a string with both uppercase and lowercase 
   vowels and assert that the answer given back is equal to the sum of the number of uppercase and lowercase vowels.

6. Test that unprintable characters do not affect the vowel count. Pass in a string with non-printable characters
   such as \b and \a along with vowels. Assert that only the number of vowels in the string is returned.
   
